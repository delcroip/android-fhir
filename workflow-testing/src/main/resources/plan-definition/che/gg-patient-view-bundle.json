{
  "resourceType": "Bundle",
  "id": "hello-world-patient-view-bundle",
  "type": "transaction",
  "entry": [ {
    "resource": {
      "resourceType": "PlanDefinition",
      "id": "emcaredt012",
      "url": "https://fhir.dk.swisstph-mis.ch/matchbox/fhir/PlanDefinition/emcaredt012",
      "identifier": [
        {
          "use": "official",
          "value": "emcaredt012"
        }
      ],
      "version": "1.0.3.build.182",
      "name": "emcaredt012",
      "title": "emcaredt012",
      "type": {
        "coding": [
          {
            "system": "http://terminology.hl7.org/CodeSystem/plan-definition-type",
            "code": "eca-rule"
          }
        ]
      },
      "status": "active",
      "experimental": false,
      "date": "2023-07-26T13:07:39+00:00",
      "action": [
        {
          "id": "emcaredt02",
          "description": "Register the child in the encounter",
          "type": {
            "coding": [
              {
                "system": "http://hl7.org/fhir/uv/cpg/CodeSystem/cpg-common-process",
                "code": "history-and-physical"
              }
            ]
          },
          "definitionCanonical": "http://localhost/ActivityDefinition/Activity-CBACRiskAssessment"
        }
      ]
    },
    "request": {
      "method": "PUT",
      "url": "PlanDefinition/emcaredt012"
    }
  },  {
    "resource": {
      "resourceType": "ActivityDefinition",
      "id": "Activity-CBACRiskAssessment",
      "url": "http://localhost/ActivityDefinition/Activity-CBACRiskAssessment",
      "kind": "Task",
      "identifier": [
        {
          "system": "http://ndhm.org",
          "value": "cbac-risk-assessment-task"
        }
      ],
      "library": [
        "https://fhir.dk.swisstph-mis.ch/matchbox/fhir/Library/emcarebregistratione"
      ],
      "dynamicValue": [
        {
          "path": "focus",
          "expression": {
            "language": "text/cql.identifier",
            "expression": "BackReference"
          }
        }
      ]
    },
    "request": {
      "method": "PUT",
      "url": "ActivityDefinition/emcarea.registration.e"
    }
  },{
    "resource": {
      "resourceType": "Library",
      "id": "emcarebregistratione",
      "url": "https://fhir.dk.swisstph-mis.ch/matchbox/fhir/Library/emcarebregistratione",
      "identifier": [
        {
          "use": "official",
          "value": "emcareb.registration.e"
        }
      ],
      "version": "1.0.3.build.182",
      "name": "emcarebregistratione",
      "title": "EmCareB.Registration.E",
      "status": "active",
      "type": {
        "coding": [
          {
            "system": "http://hl7.org/fhir/ValueSet/library-type",
            "code": "logic-library"
          }
        ]
      },
      "relatedArtifact": [
        {
          "type": "depends-on",
          "resource": "http://fhir.org/guides/who/anc-cds/Library/FHIRHelpers"
        },
        {
          "type": "depends-on",
          "resource": "https://fhir.dk.swisstph-mis.ch/matchbox/fhir/Library/emcarebase"
        },
        {
          "type": "depends-on",
          "resource": "https://fhir.dk.swisstph-mis.ch/matchbox/fhir/Library/emcarevalueset"
        }
      ],
      "parameter": [
        {
          "name": "relatedpersonuuid",
          "use": "out",
          "type": "string"
        }
      ],
      "content": [
        {
          "id": "ig-loader-emcarebregistratione.cql",
          "contentType": "text/cql",
          "data": "LyoKQGF1dGhvcjogUGF0cmljayBEZWxjcm9peApAZGVzY3JpcHRpb246IFRoaXMgbGlicmFyeSBpcyBwYXJ0IG9mIHRoZSBwcm9qZWN0IEVtQ2FyZQoqLwpsaWJyYXJ5IGVtY2FyZWJyZWdpc3RyYXRpb25lIHZlcnNpb24gJzEuMC4zLmJ1aWxkLjE4MicKdXNpbmcgRkhJUiB2ZXJzaW9uICc0LjAuMScKaW5jbHVkZSBGSElSSGVscGVycyB2ZXJzaW9uICc0LjAuMScgY2FsbGVkIEZISVJIZWxwZXJzIAppbmNsdWRlIGVtY2FyZWJhc2UgdmVyc2lvbiAnMS4wLjMuYnVpbGQuMTgyJyBjYWxsZWQgQmFzZQppbmNsdWRlIGVtY2FyZXZhbHVlc2V0IHZlcnNpb24gJzEuMC4zLmJ1aWxkLjE4MicgY2FsbGVkIHZhbAoKCgoKY29udGV4dCBQYXRpZW50CgoKLyogCkJhY2tSZWZlcmVuY2UgOiAKYmFjayByZWZlcmVuY2UgdG8gcmVzb3VyY2UKKi8KZGVmaW5lICJCYWNrUmVmZXJlbmNlIjoKICAgIFJlZmVyZW5jZSB7cmVmZXJlbmNlOiBzdHJpbmcgeyB2YWx1ZTogJ1F1ZXN0aW9ubmFpcmUvZW1jYXJlYi5yZWdpc3RyYXRpb24uZSd9fQo="
        }
      ]
    },
    "request": {
      "method": "PUT",
      "url": "Library/emcarebregistratione"
    }
  },{
    "resource": {
      "resourceType": "Library",
      "id": "emcarebase",
      "url": "https://fhir.dk.swisstph-mis.ch/matchbox/fhir//Library/emcarebase",
      "version": "1.0.3.build.182",
      "name": "emcarebase",
      "title": "EmCareBase",
      "status": "active",
      "type": {
        "coding": [
          {
            "system": "http://hl7.org/fhir/ValueSet/library-type",
            "code": "logic-library"
          }
        ]
      },
      "relatedArtifact": [
        {
          "type": "depends-on",
          "resource": "http://fhir.org/guides/who/anc-cds/Library/FHIRHelpers"
        }
      ],
      "parameter": [
        {
          "name": "encounterid",
          "use": "in",
          "type": "string"
        }
      ],
      "dataRequirement": [
        {
          "type": "Patient",
          "profile": [
            "http://hl7.org/fhir/StructureDefinition/Patient"
          ]
        },
        {
          "type": "Encounter",
          "profile": [
            "http://hl7.org/fhir/StructureDefinition/Encounter"
          ]
        }
      ],
      "content": [
        {
          "id": "ig-loader-emcarebase.cql",
          "contentType": "text/cql",
          "data": "LypudGVyIgpAYXV0aG9yOiBQYXRyaWNrIERlbGNyb2l4CkBkZXNjcmlwdGlvbjogVGhpcyBsaWJyYXJ5IGlzIHBhcnQgb2YgdGhlIHByb2plY3QgRW1DYXJlIFByb2plY3QsIGl0cyBhbGxvd3Mgc3RhbmRhcmRpc2F0aW9uIGZvciB0aGUgb2JzZXJ2YXRpb24gcHJvY2Vzc2luZwoqLwoKbGlicmFyeSBlbWNhcmViYXNlIHZlcnNpb24gJzEuMC4zLmJ1aWxkLjE4MicKCnVzaW5nIEZISVIgdmVyc2lvbiAnNC4wLjEnCgppbmNsdWRlIEZISVJIZWxwZXJzIHZlcnNpb24gJzQuMC4xJwoKcGFyYW1ldGVyICJlbmNvdW50ZXJpZCIgU3RyaW5nCi8vcGFyYW1ldGVyICJFbmNvdW50ZXIiIEVuY291bnRlciQKY29kZXN5c3RlbSAiUm9sZUNvZGVTeXN0ZW0iIDogJ2h0dHBzOi8vZmhpci5kay5zd2lzc3RwaC1taXMuY2gvbWF0Y2hib3gvZmhpci9Db2RlU3lzdGVtL2VtY2FyZS1jdXN0b20tY29kZXMnCmNvZGUgIk1vdGhlciI6ICdNVEgnIGZyb20gIlJvbGVDb2RlU3lzdGVtIgoKY29udGV4dCBQYXRpZW50CgovL2RlZmluZSBlbmNvdW50ZXJpZDoKLy8gICJFbmNvdW50ZXIiLmlkCgoKCgpkZWZpbmUgIlllcyI6CiAgdHJ1ZQoKZGVmaW5lICJObyI6CiAgZmFsc2UgCgoKZGVmaW5lIGZ1bmN0aW9uIElzSW5FbmNvdW50ZXIocmVmIEZISVIuUmVmZXJlbmNlKToKICAgIGNhc2UKICAgIHdoZW4gZW5jb3VudGVyaWQgPSByZWYuaWQgdGhlbiB0cnVlCiAgICB3aGVuIGVuY291bnRlcmlkID0gTGFzdChTcGxpdChyZWYucmVmZXJlbmNlLCAnLycpKSB0aGVuIHRydWUKICAgLy8gd2hlbiByZWYuaWRlbnRpZmllciBpcyBub3QgbnVsbCBhbmQgaWQgPSByZWYuaWRlbnRpZmllci5pZCB0aGVuIHRydWUKICAgIGVsc2UgZmFsc2UKZW5kCgpkZWZpbmUgZ2V0RW5jb3VudGVyczoKICAgIFtFbmNvdW50ZXJdIEUgCiAgICAgIHdoZXJlIEUuaWQgPSAiZW5jb3VudGVyaWQiCiAgICAgICAgcmV0dXJuIEUKCmRlZmluZSBnZXRFbmNvdW50ZXI6CiAgICBzaW5nbGV0b24gZnJvbSBnZXRFbmNvdW50ZXJzCgpkZWZpbmUgZnVuY3Rpb24gRW1DYXJlRXh0ZW5zaW9ucyhlbGVtZW50IFBhdGllbnQsIGlkIFN0cmluZyk6CiAgZWxlbWVudC5leHRlbnNpb24gRQogICAgICB3aGVyZSBFLnVybCA9ICgnaHR0cHM6Ly9maGlyLmRrLnN3aXNzdHBoLW1pcy5jaC9tYXRjaGJveC9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vJyArIGlkKQogICAgICByZXR1cm4gRQoKZGVmaW5lIGZ1bmN0aW9uIEVtQ2FyZUV4dGVuc2lvbihlbGVtZW50IFBhdGllbnQsIGlkIFN0cmluZyk6CiAgc2luZ2xldG9uIGZyb20gRW1DYXJlRXh0ZW5zaW9ucyhlbGVtZW50LCBpZCkKCmRlZmluZSBmdW5jdGlvbiBFbUNhcmVFeHRlbnNpb25zKGVsZW1lbnQgRW5jb3VudGVyLCBpZCBTdHJpbmcpOgogIGVsZW1lbnQuZXh0ZW5zaW9uIEUKICAgICAgd2hlcmUgRS51cmwgPSAoJ2h0dHBzOi8vZmhpci5kay5zd2lzc3RwaC1taXMuY2gvbWF0Y2hib3gvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uLycgKyBpZCkKICAgICAgcmV0dXJuIEUKCmRlZmluZSBmdW5jdGlvbiBFbUNhcmVFeHRlbnNpb24oZWxlbWVudCBFbmNvdW50ZXIsIGlkIFN0cmluZyk6CiAgc2luZ2xldG9uIGZyb20gRW1DYXJlRXh0ZW5zaW9ucyhlbGVtZW50LCBpZCkKCmRlZmluZSBnZXRQcmltYXJ5Q2FyZUdpdmVyUmVmZXJlbmNlOgogIEVtQ2FyZUV4dGVuc2lvbihQYXRpZW50LCAncHJpbWFyeWNhcmVnaXZlcicpLnZhbHVlCgpkZWZpbmUgZ2V0UHJpbWFyeUNhcmVHaXZlcjoKICBbUmVsYXRlZFBlcnNvbl0gUlAgd2hlcmUgUlAuaWQgPSBMYXN0KFNwbGl0KGdldFByaW1hcnlDYXJlR2l2ZXJSZWZlcmVuY2UucmVmZXJlbmNlLCAnLycpKQogICAgcmV0dXJuIFJQCgpkZWZpbmUgaXNNb3RoZXJQcmltYXJ5Q2FyZUdpdmVyOgogIGdldFByaW1hcnlDYXJlR2l2ZXIgaXMgbm90IG51bGwgYW5kIEV4aXN0cyhnZXRQcmltYXJ5Q2FyZUdpdmVyLnJlbGF0aW9uc2hpcCByIHdoZXJlIHIgfiAiTW90aGVyIikKCmRlZmluZSAiQmlvbG9naWNhbCBNb3RoZXIgVml0YWwgU3RhdHVzIjoKICBFbUNhcmVFeHRlbnNpb24oUGF0aWVudCwgJ21vdGhlclZpdGFsU3RhdHVzJykudmFsdWUKICAKZGVmaW5lICJCaW9sb2dpY2FsIEZhdGhlciBWaXRhbCBTdGF0dXMiOgogIEVtQ2FyZUV4dGVuc2lvbihQYXRpZW50LCAnZmF0aGVyVml0YWxTdGF0dXMnKS52YWx1ZQovLyBwZXJzb24gYWNjb21wYW55aW5nIHRoZSBjaGlsZCBpcyBhIHBhcnRpY2lwYW50IHdpdGggYSBudWxsIHR5cGUKZGVmaW5lIGdldFJlbGF0ZWRQZXJzb25SZWZlcmVuY2VBY2NvbXBhbnlpbmdUaGVDaGlsZDoKICBDb2FsZXNjZShGaXJzdChnZXRFbmNvdW50ZXIucGFydGljaXBhbnQgUCB3aGVyZSBub3QgZXhpc3RzKFAudHlwZSkgKS5pbmRpdmlkdWFsLCBnZXRQcmltYXJ5Q2FyZUdpdmVyUmVmZXJlbmNlKQoKZGVmaW5lIGdldFJlbGF0ZWRQZXJzb25zQWNjb21wYW55aW5nVGhlQ2hpbGQ6CiAgW1JlbGF0ZWRQZXJzb25dIFJQIHdoZXJlIFJQLmlkID0gTGFzdChTcGxpdChnZXRSZWxhdGVkUGVyc29uUmVmZXJlbmNlQWNjb21wYW55aW5nVGhlQ2hpbGQucmVmZXJlbmNlLCAnLycpKQogICAgcmV0dXJuIFJQCgoKZGVmaW5lIGdldFJlbGF0ZWRQZXJzb25BY2NvbXBhbnlpbmdUaGVDaGlsZDoKICBzaW5nbGV0b24gZnJvbSBnZXRSZWxhdGVkUGVyc29uc0FjY29tcGFueWluZ1RoZUNoaWxkCgoKZGVmaW5lICJQZXJzb24gYWNjb21wYW55aW5nIGNoaWxkIHRvZGF5J3MgUmVsYXRpb25zaGlwIHRvIENsaWVudCI6Ci8vV09SS0FSUk9VTkQgICBnZXRSZWxhdGVkUGVyc29uQWNjb21wYW55aW5nVGhlQ2hpbGQucmVsYXRpb25zaGlwCiAgRW1DYXJlRXh0ZW5zaW9uKGdldEVuY291bnRlciwgJ21vdGhlcnByZXNlbnQnKS52YWx1ZQoKCgoKCmRlZmluZSBmdW5jdGlvbiBnZXRWYWx1ZShPIE9ic2VydmF0aW9uKToKICBjYXNlICAKICAgICAgd2hlbiAgTyBpcyBudWxsIHRoZW4gbnVsbAogICAgICB3aGVuIE8udmFsdWUgaXMgQ29kZWFibGVDb25jZXB0IHRoZW4gQ29hbGVzY2UoRmlyc3QoTy52YWx1ZS5jb2RpbmcgQyB3aGVyZSBDLnN5c3RlbSAgPSAnaHR0cHM6Ly9maGlyLmRrLnN3aXNzdHBoLW1pcy5jaC9tYXRjaGJveC9maGlyL0NvZGVTeXN0ZW0vZW1jYXJlLWN1c3RvbS1jb2RlcycpLCBGaXJzdChPLnZhbHVlLmNvZGluZykpCiAgICAgIGVsc2UgTy52YWx1ZQogIGVuZAoKCmRlZmluZSBmdW5jdGlvbiBhc3Nlc09ic2VydmF0aW9uKE8gT2JzZXJ2YXRpb24pOgogIGNhc2UgIAogICAgICB3aGVuICBPIGlzIG51bGwgdGhlbiBudWxsCiAgICAgIHdoZW4gIE8uc3RhdHVzIGluICB7J2NhbmNlbGxlZCd9IHRoZW4gZmFsc2UKICAgICAgd2hlbiBPLnZhbHVlIGlzIG51bGwgdGhlbiAgdHJ1ZQogICAgICBlbHNlIE8udmFsdWUKICBlbmQKLyogICAgICAKZGVmaW5lIGZ1bmN0aW9uIEdldE9ic2VydmF0aW9uRHVyaW5nRW5jb3VudGVyKGlkbGlzdCBMaXN0PFN5c3RlbS5Db2RlPik6CiAgaWYgR2V0T2JzZXJ2YXRpb25EdXJpbmdFbmNvdW50ZXJEb25lKGlkbGlzdCApIGlzIG51bGwgdGhlbiAKICAgICAgR2V0T2JzZXJ2YXRpb25EdXJpbmdFbmNvdW50ZXJEb25lKGlkbGlzdCApCiAgZWxzZQogICAgR2V0T2JzZXJ2YXRpb25EdXJpbmdFbmNvdW50ZXJOb3RGb3VuZChpZGxpc3QgKQoqLwoKZGVmaW5lIGZ1bmN0aW9uIEdldE9ic2VydmF0aW9uRHVyaW5nRW5jb3VudGVyKGlkIFN5c3RlbS5Db2RlKToKICAgICAgRmlyc3QoW09ic2VydmF0aW9uOiBpZCBdIE8KICAgICAgICB3aGVyZSAgIElzSW5FbmNvdW50ZXIoTy5lbmNvdW50ZXIpIAogICAgICAgIGFuZCBPLnN0YXR1cyBpbiB7ICdmaW5hbCcsICdhbWVuZGVkJywgJ2NvcnJlY3RlZCcsJ2NhbmNlbGxlZCd9IAogICAgICAgIHNvcnQgYnkgaXNzdWVkLnZhbHVlIGRlc2MpIAoKICAvKgogIHRoaXMgaXMgY29tbWVudGVkIGZvciBwZXJmb3JtYW5jZSBpbXByb3ZlbWVudCwgZXZlbiBpZiBpdCBoaWRlcyBhIHZhbGlkIG9ic2VydmF0aW9uIGlmIHRoZXJlIGlzIGFuIG1vcmUgcmVjZW50IHVudmFsaWQgb25lCiAgQ29hbGVzY2UoR2V0T2JzZXJ2YXRpb25EdXJpbmdFbmNvdW50ZXJEb25lKGlkICksIEdldE9ic2VydmF0aW9uRHVyaW5nRW5jb3VudGVyTm90Rm91bmQoaWQgKSkKICAqLwovKgpkZWZpbmUgZnVuY3Rpb24gR2V0T2JzZXJ2YXRpb25EdXJpbmdFbmNvdW50ZXJEb25lKGlkbGlzdCBMaXN0PFN5c3RlbS5Db2RlPik6CiAgICAgIExhc3QoW09ic2VydmF0aW9uOiBpZGxpc3QgXSBPCiAgICAgICAgd2hlcmUgICBJc0luRW5jb3VudGVyKE8uZW5jb3VudGVyKSAKICAgICAgICBhbmQgTy5zdGF0dXMgaW4geyAnZmluYWwnLCAnYW1lbmRlZCcsICdjb3JyZWN0ZWQnfSkKKi8KZGVmaW5lIGZ1bmN0aW9uIEdldE9ic2VydmF0aW9uRHVyaW5nRW5jb3VudGVyRG9uZShpZCBTeXN0ZW0uQ29kZSk6CiAgICAgIEZpcnN0KFtPYnNlcnZhdGlvbjogaWQgXSBPCiAgICAgICAgd2hlcmUgICBJc0luRW5jb3VudGVyKE8uZW5jb3VudGVyKSAKICAgICAgICBhbmQgTy5zdGF0dXMgaW4geyAnZmluYWwnLCAnYW1lbmRlZCcsICdjb3JyZWN0ZWQnfSAKICAgICAgICBzb3J0IGJ5IGlzc3VlZC52YWx1ZSBkZXNjKSAKCgpkZWZpbmUgZnVuY3Rpb24gSGFzT2JzZXJ2YXRpb25Db2RlRHVyaW5nRW5jb3VudGVyRG9uZShpZCBTeXN0ZW0uQ29kZSwgdmFsdWVDb2RlIFN5c3RlbS5Db2RlKToKICAgIAogICAgRXhpc3RzKFtPYnNlcnZhdGlvbjogaWQgXSBPCiAgICAgICAgd2hlcmUgICBJc0luRW5jb3VudGVyKE8uZW5jb3VudGVyKSAKICAgICAgICBhbmQgTy5zdGF0dXMgaW4geyAnZmluYWwnLCAnYW1lbmRlZCcsICdjb3JyZWN0ZWQnfQogICAgICAgIGFuZCBPLnZhbHVlIGlzIEZISVIuQ29kZWFibGVDb25jZXB0CiAgICAgICAgYW5kIE8udmFsdWUgfiB2YWx1ZUNvZGUpCgovL0V4aXN0cyhbT2JzZXJ2YXRpb25dIE8gd2hlcmUgTy5zdGF0dXMgaW4geyAnZmluYWwnLCAnYW1lbmRlZCcsICdjb3JyZWN0ZWQnfSBhbmQgTy52YWx1ZSBpcyBGSElSLkNvZGVhYmxlQ29uY2VwdCAgIGFuZCBFeGlzdHMoIE8udmFsdWUuY29kaW5nIEMgd2hlcmUgQyBpcyBGSElSLkNvZGluZyBhbmQgQy5jb2RlID0gRkhJUi5jb2RlIHt2YWx1ZTogJ0VtQ2FyZS5CMjBTMi5ERTA0J30pICkiCgovKgpkZWZpbmUgZnVuY3Rpb24gR2V0T2JzZXJ2YXRpb25EdXJpbmdFbmNvdW50ZXJOb3RGb3VuZChpZGxpc3QgTGlzdDxTeXN0ZW0uQ29kZT4pOgogICAgICBMYXN0KFtPYnNlcnZhdGlvbjogaWRsaXN0XSBPCiAgICAgICB3aGVyZSAgSXNJbkVuY291bnRlcihPLmVuY291bnRlcikgCiAgICAgICAgICBhbmQgTy5zdGF0dXMgaW4geydjYW5jZWxsZWQnfSkKICAgICAgICAgICovCmRlZmluZSBmdW5jdGlvbiBHZXRPYnNlcnZhdGlvbkR1cmluZ0VuY291bnRlck5vdEZvdW5kKGlkIFN5c3RlbS5Db2RlKToKICAgICAgRmlyc3QoW09ic2VydmF0aW9uOiBpZF0gTwogICAgICAgd2hlcmUgIElzSW5FbmNvdW50ZXIoTy5lbmNvdW50ZXIpIAogICAgICAgICAgYW5kIE8uc3RhdHVzIGluIHsnY2FuY2VsbGVkJ30KICAgICAgICAgIHNvcnQgYnkgaXNzdWVkLnZhbHVlIGRlc2MpCi8qCgpkZWZpbmUgZnVuY3Rpb24gR2V0TnVtYmVyT2JzZXJ2YXRpb25EdXJpbmdFbmNvdW50ZXIoaWRsaXN0IExpc3Q8U3lzdGVtLkNvZGU+KToKICBDb3VudCgKICAgIFtPYnNlcnZhdGlvbjogaWRsaXN0XSBPCiAgICAgICAgd2hlcmUgIElzSW5FbmNvdW50ZXIoIE8uZW5jb3VudGVyKSAKICAgICAgICBhbmQgTy5zdGF0dXMgaW4geyAnZmluYWwnLCAnYW1lbmRlZCcsICdjb3JyZWN0ZWQnfSkKKi8KZGVmaW5lIGZ1bmN0aW9uIEdldE51bWJlck9ic2VydmF0aW9uRHVyaW5nRW5jb3VudGVyKGlkIFN5c3RlbS5Db2RlKToKICBDb3VudCgKICAgIFtPYnNlcnZhdGlvbjogaWRdIE8KICAgICAgICB3aGVyZSAgSXNJbkVuY291bnRlciggTy5lbmNvdW50ZXIpIAogICAgICAgIGFuZCBPLnN0YXR1cyBpbiB7ICdmaW5hbCcsICdhbWVuZGVkJywgJ2NvcnJlY3RlZCd9KQoKLy8gKioqKioqKioqKioqKioqKioqKioqKioqICAgR2V0T2JzVmFsdWUgKioqKioqKioqKioqKioqKioqKioqKioqLwovKgpkZWZpbmUgZnVuY3Rpb24gR2V0T2JzVmFsdWUoaWRsaXN0IExpc3Q8U3lzdGVtLkNvZGU+KToKICAgIGdldFZhbHVlKEdldE9ic2VydmF0aW9uRHVyaW5nRW5jb3VudGVyKGlkbGlzdCkpCgpkZWZpbmUgZnVuY3Rpb24gR2V0T2JzVmFsdWUoaWQgU3lzdGVtLkNvZGUpOgogICAgZ2V0VmFsdWUoR2V0T2JzZXJ2YXRpb25EdXJpbmdFbmNvdW50ZXIoe2lkfSkpCiovCgpkZWZpbmUgZnVuY3Rpb24gR2V0T2JzVmFsdWUoaWQgU3lzdGVtLkNvZGUpOgogICAgZ2V0VmFsdWUoR2V0T2JzZXJ2YXRpb25EdXJpbmdFbmNvdW50ZXIoaWQpKQoKZGVmaW5lIGZ1bmN0aW9uIEdldE9ic1ZhbHVlKGlkIFN5c3RlbS5TdHJpbmcsIGNvZGVzeXN0ZW0gU3lzdGVtLlN0cmluZyk6CiAgICBnZXRWYWx1ZShHZXRPYnNlcnZhdGlvbkR1cmluZ0VuY291bnRlcihjb2RpbmcoaWQsIGNvZGVzeXN0ZW0pKSkKCmRlZmluZSBmdW5jdGlvbiBHZXRPYnNWYWx1ZShpZCBTeXN0ZW0uU3RyaW5nKToKICAgIGdldFZhbHVlKEdldE9ic2VydmF0aW9uRHVyaW5nRW5jb3VudGVyKGNvZGluZyhpZCwgJ2h0dHBzOi8vZmhpci5kay5zd2lzc3RwaC1taXMuY2gvbWF0Y2hib3gvZmhpci9Db2RlU3lzdGVtL2VtY2FyZS1jdXN0b20tY29kZXMnKSkpCgpkZWZpbmUgZnVuY3Rpb24gSGFzT2JzVmFsdWVDb2RlKGlkIFN5c3RlbS5TdHJpbmcsIHZhbHVlIFN5c3RlbS5Db2RlKToKICAgSGFzT2JzZXJ2YXRpb25Db2RlRHVyaW5nRW5jb3VudGVyRG9uZShjb2RpbmcoaWQsICdodHRwczovL2ZoaXIuZGsuc3dpc3N0cGgtbWlzLmNoL21hdGNoYm94L2ZoaXIvQ29kZVN5c3RlbS9lbWNhcmUtY3VzdG9tLWNvZGVzJykgLCB2YWx1ZSApCiAgCmRlZmluZSBmdW5jdGlvbiBIYXNPYnNWYWx1ZUNvZGUoaWQgU3lzdGVtLlN0cmluZywgdmFsdWUgU3lzdGVtLlN0cmluZyk6CiAgIEhhc09ic2VydmF0aW9uQ29kZUR1cmluZ0VuY291bnRlckRvbmUoY29kaW5nKGlkLCAnaHR0cHM6Ly9maGlyLmRrLnN3aXNzdHBoLW1pcy5jaC9tYXRjaGJveC9maGlyL0NvZGVTeXN0ZW0vZW1jYXJlLWN1c3RvbS1jb2RlcycpICwgY29kaW5nKHZhbHVlLCAnaHR0cHM6Ly9maGlyLmRrLnN3aXNzdHBoLW1pcy5jaC9tYXRjaGJveC9maGlyL0NvZGVTeXN0ZW0vZW1jYXJlLWN1c3RvbS1jb2RlcycpICkKCmRlZmluZSBmdW5jdGlvbiBIYXNPYnNWYWx1ZUNvZGUoaWQgU3lzdGVtLkNvZGUsIHZhbHVlIFN5c3RlbS5TdHJpbmcpOgogICBIYXNPYnNlcnZhdGlvbkNvZGVEdXJpbmdFbmNvdW50ZXJEb25lKGlkICwgY29kaW5nKHZhbHVlLCAnaHR0cHM6Ly9maGlyLmRrLnN3aXNzdHBoLW1pcy5jaC9tYXRjaGJveC9maGlyL0NvZGVTeXN0ZW0vZW1jYXJlLWN1c3RvbS1jb2RlcycpICkKCi8vICoqKioqKioqKioqKioqKioqKioqKioqKiAgIEhhc09icyAqKioqKioqKioqKioqKioqKioqKioqKiovCi8qCmRlZmluZSBmdW5jdGlvbiBIYXNPYnMoaWRsaXN0IExpc3Q8U3lzdGVtLkNvZGU+KToKICAgIGFzc2VzT2JzZXJ2YXRpb24oR2V0T2JzZXJ2YXRpb25EdXJpbmdFbmNvdW50ZXIoaWRsaXN0KSkKCmRlZmluZSBmdW5jdGlvbiBIYXNPYnMoaWQgU3lzdGVtLkNvZGUpOgogICAgYXNzZXNPYnNlcnZhdGlvbihHZXRPYnNlcnZhdGlvbkR1cmluZ0VuY291bnRlcih7aWR9KSkKKi8KZGVmaW5lIGZ1bmN0aW9uIEhhc09icyhpZCBTeXN0ZW0uQ29kZSk6CiAgICBhc3Nlc09ic2VydmF0aW9uKEdldE9ic2VydmF0aW9uRHVyaW5nRW5jb3VudGVyKGlkKSkKCmRlZmluZSBmdW5jdGlvbiBIYXNPYnMoaWQgU3lzdGVtLlN0cmluZywgY29kZXN5c3RlbSBTeXN0ZW0uU3RyaW5nKToKICAgIGFzc2VzT2JzZXJ2YXRpb24oR2V0T2JzZXJ2YXRpb25EdXJpbmdFbmNvdW50ZXIoY29kaW5nKGlkLCBjb2Rlc3lzdGVtKSkpCgpkZWZpbmUgZnVuY3Rpb24gSGFzT2JzKGlkIFN5c3RlbS5TdHJpbmcpOgogICAgYXNzZXNPYnNlcnZhdGlvbihHZXRPYnNlcnZhdGlvbkR1cmluZ0VuY291bnRlcihjb2RpbmcoaWQpKSkKCmRlZmluZSBmdW5jdGlvbiBIYXNPYnMoaWQgRkhJUi5jb2RlLCBjb2Rlc3lzdGVtIFN5c3RlbS5TdHJpbmcpOgogICAgYXNzZXNPYnNlcnZhdGlvbihHZXRPYnNlcnZhdGlvbkR1cmluZ0VuY291bnRlcihjb2RpbmcoaWQsIGNvZGVzeXN0ZW0pKSkKLyoKZGVmaW5lIGZ1bmN0aW9uIEdldEhpc3RvcmljT2JzZXJ2YXRpb24oaWRsaXN0IExpc3Q8U3lzdGVtLkNvZGU+LCBuYmRheXMgSW50ZWdlcik6CiAgaWYgR2V0SGlzdG9yaWNPYnNlcnZhdGlvbk5vdGZvdW5kKGlkbGlzdCAsIGNvZGVzeXN0ZW0gLCBuYmRheXMgKSBpcyBudWxsIHRoZW4gCiAgICAgIEdldEhpc3RvcmljT2JzZXJ2YXRpb25Ob3Rmb3VuZChpZGxpc3QgLCBjb2Rlc3lzdGVtICwgbmJkYXlzICkKICBlbHNlCiAgICBHZXRIaXN0b3JpY09ic2VydmF0aW9uTm90Zm91bmQoaWRsaXN0ICwgY29kZXN5c3RlbSAsIG5iZGF5cyApCiovCgpkZWZpbmUgZnVuY3Rpb24gR2V0SGlzdG9yaWNPYnNlcnZhdGlvbihpZCBTeXN0ZW0uQ29kZSwgbmJkYXlzIEludGVnZXIpOgogICAgICBGaXJzdChbT2JzZXJ2YXRpb246IGlkIF0gTwogICAgICAgIHdoZXJlIE8uc3RhdHVzIGluIHsgJ2ZpbmFsJywgJ2FtZW5kZWQnLCAnY29ycmVjdGVkJywnY2FuY2VsbGVkJ30gCiAgICAgICAgYW5kIChkaWZmZXJlbmNlIGluIGRheXMgYmV0d2VlbiBPLmlzc3VlZCBhbmQgVG9kYXkoKSkgPCBuYmRheXMgCiAgICAgICAgc29ydCBieSBpc3N1ZWQudmFsdWUgZGVzYyApCgogIC8vQ29hbGVzY2UoR2V0SGlzdG9yaWNPYnNlcnZhdGlvbkRvbmUoaWQgLCAgbmJkYXlzICksICBHZXRIaXN0b3JpY09ic2VydmF0aW9uTm90Zm91bmQoaWQgICwgbmJkYXlzICkpCi8qCmRlZmluZSBmdW5jdGlvbiBHZXRIaXN0b3JpY09ic2VydmF0aW9uRG9uZShpZGxpc3QgTGlzdDxTeXN0ZW0uQ29kZT4sIG5iZGF5cyBJbnRlZ2VyKToKICAgICAgTGFzdChbT2JzZXJ2YXRpb246IGlkbGlzdCBdIE8KICAgICAgICB3aGVyZSAgTy5zdGF0dXMgaW4geyAnZmluYWwnLCAnYW1lbmRlZCcsICdjb3JyZWN0ZWQnfQogICAgICAgIGFuZCAoZGlmZmVyZW5jZSBpbiBkYXlzIGJldHdlZW4gTy5pc3N1ZWQgYW5kIFRvZGF5KCkpIDwgbmJkYXlzKQoqLwpkZWZpbmUgZnVuY3Rpb24gR2V0SGlzdG9yaWNPYnNlcnZhdGlvbkRvbmUoaWQgU3lzdGVtLkNvZGUsIG5iZGF5cyBJbnRlZ2VyKToKICAgICAgRmlyc3QoW09ic2VydmF0aW9uOiBpZCBdIE8KICAgICAgICB3aGVyZSAgTy5zdGF0dXMgaW4geyAnZmluYWwnLCAnYW1lbmRlZCcsICdjb3JyZWN0ZWQnfQogICAgICAgIGFuZCAoZGlmZmVyZW5jZSBpbiBkYXlzIGJldHdlZW4gTy5pc3N1ZWQgYW5kIFRvZGF5KCkpIDwgbmJkYXlzIAogICAgICAgIHNvcnQgYnkgaXNzdWVkLnZhbHVlIGRlc2MgKQoKLyoKZGVmaW5lIGZ1bmN0aW9uIEdldEhpc3RvcmljT2JzZXJ2YXRpb25Ob3Rmb3VuZChpZGxpc3QgTGlzdDxTeXN0ZW0uQ29kZT4sIG5iZGF5cyBJbnRlZ2VyKToKICAgICAgTGFzdChbT2JzZXJ2YXRpb246IGlkbGlzdF0gTwogICAgICAgIHdoZXJlICBPLnN0YXR1cyBpbiB7J2NhbmNlbGxlZCd9CiovCmRlZmluZSBmdW5jdGlvbiBHZXRIaXN0b3JpY09ic2VydmF0aW9uTm90Zm91bmQoaWQgU3lzdGVtLkNvZGUsIG5iZGF5cyBJbnRlZ2VyKToKICAgICAgRmlyc3QoW09ic2VydmF0aW9uOiBpZF0gTwogICAgICAgIHdoZXJlICBPLnN0YXR1cyBpbiB7J2NhbmNlbGxlZCd9CiAgICAgICAgICBhbmQgKGRpZmZlcmVuY2UgaW4gZGF5cyBiZXR3ZWVuIE8uaXNzdWVkIGFuZCBUb2RheSgpKSA8IG5iZGF5cyAKICAgICAgICBzb3J0IGJ5IGlzc3VlZC52YWx1ZSBkZXNjKQovLyAqKioqKioqKioqKioqKioqKioqKioqKiogICBIYXNPYnNIaXN0b3J5ICoqKioqKioqKioqKioqKioqKioqKioqKi8KCi8qCmRlZmluZSBmdW5jdGlvbiBIYXNPYnNIaXN0b3J5KGlkbGlzdCBMaXN0PFN5c3RlbS5Db2RlPiwgIG5iZGF5cyBJbnRlZ2VyKToKICBhc3Nlc09ic2VydmF0aW9uKEdldEhpc3RvcmljT2JzZXJ2YXRpb24oaWRsaXN0LCBuYmRheXMpKQoKCiBkZWZpbmUgZnVuY3Rpb24gSGFzT2JzSGlzdG9yeShpZCBTeXN0ZW0uQ29kZSwgY25iZGF5cyBJbnRlZ2VyKToKICBhc3Nlc09ic2VydmF0aW9uKEdldEhpc3RvcmljT2JzZXJ2YXRpb24oe2lkfSwgbmJkYXlzKSkKKi8KZGVmaW5lIGZ1bmN0aW9uIEhhc09ic0hpc3RvcnkoaWQgU3lzdGVtLkNvZGUsIG5iZGF5cyBJbnRlZ2VyKToKICBhc3Nlc09ic2VydmF0aW9uKEdldEhpc3RvcmljT2JzZXJ2YXRpb24oaWQsIG5iZGF5cykpCgpkZWZpbmUgZnVuY3Rpb24gSGFzT2JzSGlzdG9yeShpZCBTeXN0ZW0uU3RyaW5nLCBjb2Rlc3lzdGVtIFN5c3RlbS5TdHJpbmcsIG5iZGF5cyBJbnRlZ2VyKToKICBhc3Nlc09ic2VydmF0aW9uKEdldEhpc3RvcmljT2JzZXJ2YXRpb24oY29kaW5nKGlkLCBjb2Rlc3lzdGVtKSwgbmJkYXlzKSkKCgpkZWZpbmUgZnVuY3Rpb24gSGFzT2JzSGlzdG9yeShpZCBTeXN0ZW0uU3RyaW5nLCBuYmRheXMgSW50ZWdlcik6CiAgYXNzZXNPYnNlcnZhdGlvbihHZXRIaXN0b3JpY09ic2VydmF0aW9uKGNvZGluZyhpZCksIG5iZGF5cykpCgpkZWZpbmUgZnVuY3Rpb24gYyhzIFN5c3RlbS5TdHJpbmcpOgogIEZISVIuY29kZSB7IHZhbHVlOiBzIH0KCgoKZGVmaW5lIGZ1bmN0aW9uIGNvZGluZyhzIFN5c3RlbS5TdHJpbmcsIHVybCBTeXN0ZW0uU3RyaW5nKToKICBTeXN0ZW0uQ29kZSB7CiAgICAgICAgICAgICAgICBjb2RlOiAgcyAsCiAgICAgICAgICAgICAgICBzeXN0ZW06ICB1cmwgCiAgICAgICAgICAgIH0KCmRlZmluZSBmdW5jdGlvbiBjb2RpbmcocyBGSElSLmNvZGUsIHVybCBTeXN0ZW0uU3RyaW5nKToKICBTeXN0ZW0uQ29kZSB7CiAgICAgICAgICAgICAgICBjb2RlOiAgcy52YWx1ZSAsCiAgICAgICAgICAgICAgICBzeXN0ZW06ICB1cmwgCiAgICAgICAgICAgIH0KCmRlZmluZSBmdW5jdGlvbiBjb2RpbmcocyBTeXN0ZW0uU3RyaW5nKToKICBTeXN0ZW0uQ29kZSB7CiAgICAgICAgICAgICAgICBjb2RlOiAgcyAsCiAgICAgICAgICAgICAgICBzeXN0ZW06ICAnaHR0cHM6Ly9maGlyLmRrLnN3aXNzdHBoLW1pcy5jaC9tYXRjaGJveC9maGlyL0NvZGVTeXN0ZW0vZW1jYXJlLWN1c3RvbS1jb2RlcycKICAgICAgICAgICAgfQoKCmRlZmluZSBmdW5jdGlvbiBUb1VybChzIFN5c3RlbS5TdHJpbmcpOgogIHVybCB7dmFsdWU6c30KCmRlZmluZSBmdW5jdGlvbiBUb0ludEMoYiBTeXN0ZW0uQm9vbGVhbik6CiAgY2FzZQogIHdoZW4gYiBpcyBudWxsIHRoZW4gMAogIHdoZW4gYiA9IHRydWUgdGhlbiAxCiAgZWxzZSAwCiAgZW5kCgoKLy8gKioqKioqKioqKioqKioqKioqKioqKioqICAgR2V0Q29uZCAqKioqKioqKioqKioqKioqKioqKioqKiovCi8qCmRlZmluZSBmdW5jdGlvbiBHZXRDb08uZW5jb3VudGVybmRpdGlvbihpZGxpc3QgTGlzdDxTeXN0ZW0uQ29kZT4pOgogICAgICBMYXN0KFtDb25kaXRpb246IGlkbGlzdF0gTwogICAgICAgIHdoZXJlICBJc0luRW5jb3VudGVyKCBPLmVuY291bnRlcikgCiAgICAgICAgYW5kIGV4aXN0cyhPLnZlcmlmaWNhdGlvblN0YXR1cy5jb2RpbmcgQyB3aGVyZSBDLmNvZGUgaW4geyd1bmNvbmZpcm1lZCcsICdwcm92aXNpb25hbCcsICdkaWZmZXJlbnRpYWwnLCAnY29uZmlybWVkJ30gCiAgICAgICAgYW5kIEMuc3lzdGVtID0gJ2h0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29uZGl0aW9uLXZlci1zdGF0dXMnKSkKKi8KZGVmaW5lIGZ1bmN0aW9uIEdldENvbmRpdGlvbihpZCBTeXN0ZW0uQ29kZSk6CiAgICAgIEZpcnN0KFtDb25kaXRpb246IGlkXSBPCiAgICAgICAgd2hlcmUgIElzSW5FbmNvdW50ZXIoTy5lbmNvdW50ZXIpIAogICAgICAgIGFuZCBleGlzdHMoTy52ZXJpZmljYXRpb25TdGF0dXMuY29kaW5nIEMgd2hlcmUgQy5jb2RlIGluIHsndW5jb25maXJtZWQnLCAncHJvdmlzaW9uYWwnLCAnZGlmZmVyZW50aWFsJywgJ2NvbmZpcm1lZCd9IAogICAgICAgIGFuZCBDLnN5c3RlbSA9ICdodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbmRpdGlvbi12ZXItc3RhdHVzJykgCiAgICAgICAgc29ydCBieSByZWNvcmRlZERhdGUgZGVzYykKCgpkZWZpbmUgZnVuY3Rpb24gYXNzZXNDb25kaXRpb24oTyBDb25kaXRpb24pOgogIGlmIE8gaXMgbnVsbCB0aGVuIAogICAgZmFsc2UKICBlbHNlCiAgICB0cnVlCi8qCmRlZmluZSBmdW5jdGlvbiBHZXRDb25kKGlkbGlzdCBMaXN0PFN5c3RlbS5Db2RlPik6CiAgR2V0Q29uZGl0aW9uKGlkbGlzdCkKCmRlZmluZSBmdW5jdGlvbiBHZXRDb25kKGlkIFN5c3RlbS5Db2RlKToKICBHZXRDb25kaXRpb24oe2lkfSkKKi8KZGVmaW5lIGZ1bmN0aW9uIEdldENvbmQoaWQgU3lzdGVtLkNvZGUpOgogIChHZXRDb25kaXRpb24oaWQpKQoKZGVmaW5lIGZ1bmN0aW9uIEdldENvbmQoaWQgU3lzdGVtLlN0cmluZywgY29kZXN5c3RlbSBTeXN0ZW0uU3RyaW5nKToKICAoR2V0Q29uZGl0aW9uKGNvZGluZyhpZCwgY29kZXN5c3RlbSkpKQoKZGVmaW5lIGZ1bmN0aW9uIEdldENvbmQoaWQgU3lzdGVtLlN0cmluZyk6CiAgKEdldENvbmRpdGlvbihjb2RpbmcoaWQpKSkKCi8vICoqKioqKioqKioqKioqKioqKioqKioqKiAgIEhhc0NvbmQgKioqKioqKioqKioqKioqKioqKioqKioqLwovKgpkZWZpbmUgZnVuY3Rpb24gSGFzQ29uZChpZGxpc3QgTGlzdDxTeXN0ZW0uQ29kZT4pOgogIGFzc2VzQ29uZGl0aW9uKEdldENvbmRpdGlvbihpZGxpc3QpKQoKCjM1MThHZXRDb25kaXRpb24oaWQpKQoqLwpkZWZpbmUgZnVuY3Rpb24gSGFzQ29uZChpZCBTeXN0ZW0uU3RyaW5nLCBjb2Rlc3lzdGVtIFN5c3RlbS5TdHJpbmcpOgogIGFzc2VzQ29uZGl0aW9uKEdldENvbmRpdGlvbihjb2RpbmcoaWQsIGNvZGVzeXN0ZW0pKSkKCmRlZmluZSBmdW5jdGlvbiBIYXNDb25kKGlkIFN5c3RlbS5TdHJpbmcpOgogIGFzc2VzQ29uZGl0aW9uKEdldENvbmRpdGlvbihjb2RpbmcoaWQpKSkKCmRlZmluZSBmdW5jdGlvbiBIYXNDb25kKGlkIFN5c3RlbS5Db2RlKToKICBhc3Nlc0NvbmRpdGlvbihHZXRDb25kaXRpb24oaWQpKQoKLy8gKioqKioqKioqKioqKioqKioqKioqKioqICAgUGF0aWVudEhhc0hpc3RvcnlPZkNvbmRpdGlvbiAqKioqKioqKioqKioqKioqKioqKioqKiovCi8qCmRlZmluZSBmdW5jdGlvbiBHZXRIaXN0b3JpY0NvbmRpdGlvbihpZGxpc3QgTGlzdDxTeXN0ZW0uQ29kZT4sICBuYmRheXMgSW50ZWdlcik6CiAgICAgIExhc3QoW0NvbmRpdGlvbjogaWRsaXN0XSBPCiAgICAgICAgd2hlcmUgIChkaWZmZXJlbmNlIGluIGRheXMgYmV0d2VlbiBPLnJlY29yZGVkRGF0ZSBhbmQgVG9kYXkoKSkgPCBuYmRheXMKICAgICAgICBhbmQgZXhpc3RzKE8udmVyaWZpY2F0aW9uU3RhdHVzLmNvZGluZyBDIHdoZXJlIEMuY29kZSBpbiB7J3VuY29uZmlybWVkJywgJ3Byb3Zpc2lvbmFsJywgJ2RpZmZlcmVudGlhbCcsICdjb25maXJtZWQnfSAKICAgICAgICBhbmQgQy5zeXN0ZW0gPSAnaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb25kaXRpb24tdmVyLXN0YXR1cycpKQoqLwoKZGVmaW5lIGZ1bmN0aW9uIEdldEhpc3RvcmljQ29uZGl0aW9uKGlkIFN5c3RlbS5Db2RlLCAgbmJkYXlzIEludGVnZXIpOgogICAgICBGaXJzdChbQ29uZGl0aW9uOiBpZF0gTwogICAgICAgIHdoZXJlICAoZGlmZmVyZW5jZSBpbiBkYXlzIGJldHdlZW4gTy5yZWNvcmRlZERhdGUgYW5kIFRvZGF5KCkpIDwgbmJkYXlzCiAgICAgICAgYW5kIGV4aXN0cyhPLnZlcmlmaWNhdGlvblN0YXR1cy5jb2RpbmcgQyB3aGVyZSBDLmNvZGUgaW4geyd1bmNvbmZpcm1lZCcsICdwcm92aXNpb25hbCcsICdkaWZmZXJlbnRpYWwnLCAnY29uZmlybWVkJ30gCiAgICAgICAgYW5kIEMuc3lzdGVtID0gJ2h0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29uZGl0aW9uLXZlci1zdGF0dXMnKSAKICAgICAgICBzb3J0IGJ5IHJlY29yZGVkRGF0ZSBkZXNjKQoKCgoKLyoKZGVmaW5lIGZ1bmN0aW9uIEhhc0NvbmRIaXN0b3J5KGlkbGlzdCBMaXN0PFN5c3RlbS5Db2RlPiwgIG5iZGF5cyBJbnRlZ2VyKToKICBhc3Nlc0NvbmRpdGlvbihHZXRIaXN0b3JpY0NvbmRpdGlvbihpZGxpc3QsICBuYmRheXMpKQoKCmRlZmluZSBmdW5jdGlvbiBIYXNDb25kSGlzdG9yeShpZCBTeXN0ZW0uQ29kZSwgIG5iZGF5cyBJbnRlZ2VyKToKICBhc3Nlc0NvbmRpdGlvbihHZXRIaXN0b3JpY0NvbmRpdGlvbih7aWR9LCBuYmRheXMpKQoqLwpkZWZpbmUgZnVuY3Rpb24gSGFzQ29uZEhpc3RvcnkoaWQgU3lzdGVtLkNvZGUsIG5iZGF5cyBJbnRlZ2VyKToKICBhc3Nlc0NvbmRpdGlvbihHZXRIaXN0b3JpY0NvbmRpdGlvbihpZCwgIG5iZGF5cykpCgpkZWZpbmUgZnVuY3Rpb24gSGFzQ29uZEhpc3RvcnkoaWQgU3lzdGVtLlN0cmluZywgY29kZXN5c3RlbSBTeXN0ZW0uU3RyaW5nLCBuYmRheXMgSW50ZWdlcik6CiAgYXNzZXNDb25kaXRpb24oR2V0SGlzdG9yaWNDb25kaXRpb24oY29kaW5nKGlkLGNvZGVzeXN0ZW0pLG5iZGF5cykpCgoKZGVmaW5lIGZ1bmN0aW9uIEhhc0NvbmRIaXN0b3J5KGlkIFN5c3RlbS5TdHJpbmcsIG5iZGF5cyBJbnRlZ2VyKToKICBhc3Nlc0NvbmRpdGlvbihHZXRIaXN0b3JpY0NvbmRpdGlvbihjb2RpbmcoaWQpLCAgbmJkYXlzKSkKCgoKLy9kZWZpbmUgZnVuY3Rpb24gUGF0aWVudEhhc0NvbmRpdGlvbkR1cmluZ0VuY291bnRlcihpZCBTdHJpbmcsIGNvZGVzeXN0ZW0gdXJsLCBkdXJhdGlvbiBJbnRlZ2VyKSk6CgovL2RlZmluZSBmdW5jdGlvbiBQYXRpZW50SGFzQ29uZGl0aW9uRnJvbVZhbHVlU2V0RHVyaW5nRW5jb3VudGVyKGlkIFN0cmluZywgY29kZXN5c3RlbSB1cmwsIGR1cmF0aW9uIEludGVnZXIpKToKCi8vZGVmaW5lIGZ1bmN0aW9uIFBhdGllbnRIYXNIc2lzdG9yeUNvbmRpdGlvbihpZCBTdHJpbmcsY29kZXN5c3RlbSB1cmwgLCBkdXJhdGlvbiBJbnRlZ2VyKToKLy9kZWZpbmUgZnVuY3Rpb24gUGF0aWVudEhhc0hzaXN0b3J5Q29uZGl0aW9uRnJvbVZhbHVlU2V0KGlkIFN0cmluZyxjb2Rlc3lzdGVtIHVybCAsIGR1cmF0aW9uIEludGVnZXIpOgoKCi8vIFBhdGllbnRIYXNTeW1wdG9tKCJzeW1wdG9tIG5hbWUiKTogc3ltcHRvbSBpbiB0aGUgZW5jb3VudGVyCgoKLy8gUGF0aWVudExhc3RNZWFzdXJlT2YoIm1lYXN1cmUgbmFtZSIpOiBtZWFzdXJlIGluIHRoZSBlbmNvdW50ZXIKCi8vIFBhdGllbnRMYXN0SGlzdG9yaWNNZWFzdXJlT2YoIm1lYXN1cmUgbmFtZSIsIGR1cmF0aW9uKTogbWVhc3VyZSBpbiB0aGUgcGF0aWVudCBoaXN0b3J5IGR1cmluZyBkdXJhdGlvbgoKLy8gUGF0aWVudEhhc0RpYWdub3N0aWMoIkRpYWdub3N0aWMgbmFtZSIgKTogRGlhZ25vc3RpYyBpbiB0aGUgZW5jb3VudGVyCgovLyBQYXRpZW50SGFzSGlzdG9yeU9mRGlhZ25vc3RpYygiRGlhZ25vc3RpYyBuYW1lIiwgZHVyYXRpb24gKTogRGlhZ25vc3RpYyBpbiB0aGUgcGF0aWVudCBoaXN0b3J5IGR1cmluZyBkdXJhdGlvbgoKLy8gUGF0aWVudEhhc1Byb3Bvc2Vkb3JDb25maXJtZWREaWFub3N0aWMoIkRpYWdub3N0aWMgbmFtZSIgKTogRGlhZ25vc3RpYyBpbiB0aGUgZW5jb3VudGVyCgovLyBQYXRpZW50SGFzSGlzdG9yeU9mUHJvcG9zZWRvckNvbmZpcm1lZERpYW5vc3RpYygiRGlhZ25vc3RpYyBuYW1lIiwgZHVyYXRpb24gKTogRGlhZ25vc3RpYyBpbiB0aGUgcGF0aWVudCBoaXN0b3J5IGR1cmluZyBkdXJhdGlvbgoKLy8gUGF0aWVudFpTY29yZVdmQSh3aWVnaHQsIGFnZSkKCi8vIFBhdGllbnRXZWlnaHRGcm9tV2ZBKGFnZSwgTXVhYykK"
        }
      ]
    },
    "request": {
      "method": "PUT",
      "url": "Library/emcarebase"
    }
  },{
      "resource": {
        "resourceType": "Library",
        "id": "emcarevalueset",
        "url": "https://fhir.dk.swisstph-mis.ch/matchbox/fhir/Library/emcarevalueset",
        "version": "1.0.3.build.182",
        "name": "emcarevalueset",
        "status": "active",
        "type": {
          "coding": [
            {
              "system": "http://hl7.org/fhir/ValueSet/library-type",
              "code": "logic-library"
            }
          ]
        },
        "relatedArtifact": [
          {
            "type": "depends-on",
            "resource": "http://fhir.org/guides/who/anc-cds/Library/FHIRHelpers"
          }
        ],
        "content": [
          {
            "id": "ig-loader-emcarevalueset.cql",
            "contentType": "text/cql",
            "data": ""
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "Library/emcarevalueset"
      }
  } ]
}